//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
/*
    클래스 상속
    - 새로운 클래스 정의할 때마다 이미 구현된 클래스를 상속받아서 속성 기능을 확장하여 클래스를 구현
    - 이미 구현된 클래스보다 더 구체적인 기능을 가진 클래스를 구현해야 할 때

    용어
    - 상속하는 클래스 : 상위 클래스 부모(parent) base class super class
    - 상속받는 클래스 : 하위 클래스 자식 derived class sub class

    문법
    class 자식클래스 extends 부모클래스{

    }
    - extends 뒤에는 한개의 클래스만 올 수 있다(다중 상속x)
    부모 클래스 : 공통적인
    자식 클래스 : 부모 클래스보다 더 구체적인 개념과 기능을 가짐
                ㄴ 자식 클래스가 부모 클래스의 기능을 확장(extend)한다
    super 키워드
    - super : 하위 클래스에서 가지는 상위 클래스에 대한 참조 값 (주소값)
    - super() : 상위 클래스의 생성자 호출

    - 하위 클래스에서 별도로 상위 클래스의 생성자를 호출하지 않으면
      자동으로 super()가 호출됨
      (이 때 반드시 상위 클래스의 기본 생성자가 존재 해야함)
    - 상위 클래스의 기본 생성자가 없는 경우(다른 생성자가 있는 경우)
      하위 클래스에서는 생성자에서는 super()를 이용하여
      명시적으로 상위 클래스의 생성자를 호출함

    - super는 생성된 상위 클래스 객체(인스턴스) 주소값을 가지므로
      super를 이용하여 상위 클래스의 메서드나 멤버변수에 접근할 수 있음

    메서드 재정의와 가상 메서드 원리
    - 메서드는 어떻게 호출되고 실행 되는가?

    - 메서드(함수)의 이름은 주소값을 나타냄
        ㄴ int 함수이름(자료형 변수 자료형 변수)
    - 메서드는 명령어의 set이고 프로그램이 로드되면
    - 메서드 영역(코드 영역)에 명령어 set이 위치
    - 해당 메서드가 호출되면 명령어 set이 있는 주소를 찾아 명령어가 실행됨
        ㄴ 이 때 메서드에서 사용하는 변수들은 스택 메모리에 위치 하게됨
    - 따라서 다른 인스턴스라도 같은 메서드의 코드는 같으므로 같은 메서드가 호출됨
    - 인스턴스가 생성되면 변수는 힙 메모리에 따로 생성되지만
    - 메서드 명령어 set은 처음 한번만 로드됨

    가상 메서드의 원리
     - 가상 메서드 테이블에서 해당 메서드의 대한 주소값을 가지고 있다
     - 재정의된 경우는 재정의된 메서드릐 주소를 가리킨다

    다형성
    - 하나의 코드가 여러 자료형으로 구현되어 실행되는 것
    - 같은 코드에서 여려 다른 실행 결과가 나옴
    - 정보은닉 상속과 더불어 객체지향 프로그래밍의 가장 큰 특징 중 하나
    - 다형성을 잘 활용하면 유연하고 확장성있고 유지보수가 편리한 프로그램을 만들 수 있다
*/

public class Main {

}